"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspaceInfo = void 0;
var tslib_1 = require("tslib");
var support_1 = require("./support");
var path_1 = tslib_1.__importDefault(require("path"));
function getWorkspaceInfo(_a) {
    var cwd = _a.cwd, _b = _a.useLerna, useLerna = _b === void 0 ? false : _b, _c = _a.skipDev, skipDev = _c === void 0 ? false : _c, _d = _a.includePeer, includePeer = _d === void 0 ? false : _d;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var packageJSON, packagesMap, workspaceInfos, workspaceInfo;
        var _this = this;
        return tslib_1.__generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, support_1.readJsonFile(path_1.default.resolve(cwd, useLerna ? 'lerna.json' : 'package.json'))];
                case 1:
                    packageJSON = _e.sent();
                    if (useLerna) {
                        packageJSON = support_1.transformLernaConfigToYarnConfig(packageJSON);
                    }
                    return [4 /*yield*/, support_1.getWorkspacePackages({
                            packageJSON: packageJSON,
                            cwd: cwd,
                        })];
                case 2:
                    packagesMap = _e.sent();
                    return [4 /*yield*/, Promise.all(Object.keys(packagesMap).map(function (k) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var location, currentPackageJson;
                            var _a;
                            return tslib_1.__generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        location = packagesMap[k];
                                        return [4 /*yield*/, support_1.readJsonFile(path_1.default.resolve(location, 'package.json'))];
                                    case 1:
                                        currentPackageJson = _b.sent();
                                        return [2 /*return*/, (_a = {},
                                                _a[k] = {
                                                    location: location,
                                                    mismatchedWorkspaceDependencies: [],
                                                    workspaceDependencies: support_1.getPackageDependencies({
                                                        includeDev: !skipDev,
                                                        includePeer: includePeer,
                                                        packageJSON: currentPackageJson,
                                                    }).filter(function (x) { return packagesMap[x]; }),
                                                },
                                                _a)];
                                }
                            });
                        }); }))];
                case 3:
                    workspaceInfos = _e.sent();
                    workspaceInfo = Object.assign.apply(Object, tslib_1.__spreadArrays([{}], workspaceInfos));
                    return [2 /*return*/, workspaceInfo];
            }
        });
    });
}
exports.getWorkspaceInfo = getWorkspaceInfo;
// {
//     '@ryancavanaugh/folder-pkg2': {
//         location: 'packages/folder/pkg2',
//         workspaceDependencies: ['@ryancavanaugh/pkg1'],
//         mismatchedWorkspaceDependencies: [],
//     },
//     '@ryancavanaugh/pkg1': {
//         location: 'packages/pkg1',
//         workspaceDependencies: [],
//         mismatchedWorkspaceDependencies: [],
//     },
//     '@ryancavanaugh/pkg2': {
//         location: 'packages/pkg2',
//         workspaceDependencies: [
//             '@ryancavanaugh/folder-pkg2',
//             '@ryancavanaugh/pkg1',
//         ],
//         mismatchedWorkspaceDependencies: [],
//     },
//     '@ryancavanaugh/pkg3': {
//         location: 'packages/pkg3',
//         workspaceDependencies: [
//             '@ryancavanaugh/pkg1',
//             '@ryancavanaugh/pkg2',
//         ],
//         mismatchedWorkspaceDependencies: [],
//     },
// }
//# sourceMappingURL=index.js.map
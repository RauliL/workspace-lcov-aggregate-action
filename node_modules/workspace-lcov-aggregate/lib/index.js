"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const chalk_1 = __importDefault(require("chalk"));
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const n_readlines_1 = __importDefault(require("n-readlines"));
const workspace_info_1 = require("workspace-info");
const printInfo = (message) => process.stdout.write(`${chalk_1.default.blue(message)}\n`);
const printWarning = (message) => process.stderr.write(`${chalk_1.default.yellow(message)}\n`);
const printError = (message) => process.stderr.write(`${chalk_1.default.red(message)}\n`);
const processWorkspace = (name, location) => {
    const relativePath = node_path_1.default.relative(process.cwd(), location);
    const lcovInfoPath = node_path_1.default.join(location, "coverage", "lcov.info");
    const result = [];
    if (!node_fs_1.default.existsSync(lcovInfoPath)) {
        printWarning(`No \`lcov.info' found for \`${name}'.`);
        return;
    }
    printInfo(`Processing \`${name}'...`);
    const lineReader = new n_readlines_1.default(lcovInfoPath);
    let lineBuffer;
    while ((lineBuffer = lineReader.next())) {
        const line = lineBuffer.toString("utf-8");
        const match = /^SF:(.+)$/.exec(line);
        if (match) {
            result.push(`SF:${node_path_1.default.join(relativePath, match[1])}`);
        }
        else {
            result.push(line);
        }
    }
    return result;
};
const aggregateResults = (cwd, results) => {
    const outputDir = node_path_1.default.join(cwd, "coverage");
    const outputFile = node_path_1.default.join(outputDir, "lcov.info");
    printInfo(`Creating \`${outputFile}'...`);
    if (!node_fs_1.default.existsSync(outputDir)) {
        node_fs_1.default.mkdirSync(outputDir);
    }
    node_fs_1.default.open(outputFile, "w", (err, fd) => {
        if (err) {
            printError(String(err));
            return;
        }
        results.forEach((lines) => lines.forEach((line) => node_fs_1.default.writeSync(fd, `${line}\n`)));
        node_fs_1.default.closeSync(fd);
    });
};
const run = () => __awaiter(void 0, void 0, void 0, function* () {
    const cwd = process.cwd();
    const workspaces = yield (0, workspace_info_1.getWorkspaceInfo)({ cwd });
    const names = Object.keys(workspaces);
    const results = [];
    if (names.length === 0) {
        printError("No workspaces found.");
        process.exit(1);
    }
    for (const name of names) {
        const result = processWorkspace(name, workspaces[name].location);
        if (result) {
            results.push(result);
        }
    }
    aggregateResults(cwd, results);
    process.stdout.write(`${chalk_1.default.green("Done!")}\n`);
});
exports.run = run;
